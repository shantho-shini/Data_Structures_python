adding and deleting elemets in singly linkedlist :
-------------------------------------------------------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class ll():
    def __init__(self):
        self.head=None
    def add_last(self,n):
        if self.head==None:
            self.head=n
        else:
            temp=self.head
            while temp.next !=None:
                temp=temp.next
            temp.next=n
    def display(self):
        curr=self.head
        while curr is not None:
            print(curr.data)
            curr=curr.next
    def add_first(self,n):
        add_first_temp=self.head
        #add_first_temp=self.head
        n.next=add_first_temp
        self.head=n
    def add_mid_before(self,n,val):
        add_mid_before_temp=self.head
        while add_mid_before_temp.next.data !=val:
            add_mid_before_temp=add_mid_before_temp.next
        n.next=add_mid_before_temp.next
        add_mid_before_temp.next=n
    def add_mid_after(self,n,val):
        add_mid_after_temp=self.head
        while add_mid_after_temp.data!=val:
            add_mid_after_temp=add_mid_after_temp.next
        n.next=add_mid_after_temp.next
        add_mid_after_temp.next=n
    def delete_first(self):
        self.head=self.head.next
    def delete_last(self):
        delete_last_temp=self.head
        while delete_last_temp.next.next !=None:
            delete_last_temp=delete_last_temp.next
        delete_last_temp.next=None
    def delete_mid(self,val):
        delete_mid_temp=self.head
        while delete_mid_temp.next.data !=val:
            delete_mid_temp=delete_mid_temp.next
        delete_mid_temp.next=delete_mid_temp.next.next
        
            
            
n1=node(300)
n2=node(100)
n3=node(500)
n4=node(200)
n5=node(400)
l=ll()
l.add_last(n1)
l.add_first(n2)
l.add_last(n3)
l.add_mid_before(n4,300)
l.add_mid_after(n5,300)
l.delete_first()
l.delete_last()
l.delete_mid(300)
l.display()


--------------------------------------------------
adding element in linked_list:
--------------------------------------------------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class ll():
    def __init__(self):
        self.head=None
    def add_last(self,n):
        if self.head==None:
            self.head=n
        else:
            temp=self.head
            while temp.next !=None:
                temp=temp.next
            temp.next=n
    def display(self):
        curr=self.head
        while curr is not None:
            print(curr.data)
            curr=curr.next
    def add_first(self,n):
        add_first_temp=self.head
        #add_first_temp=self.head
        n.next=add_first_temp
        self.head=n
    def add_mid_before(self,n,val):
        add_mid_before_temp=self.head
        while add_mid_before_temp.next.data !=val:
            add_mid_before_temp=add_mid_before_temp.next
        n.next=add_mid_before_temp.next
        add_mid_before_temp.next=n
    def add_mid_after(self,n,val):
        add_mid_after_temp=self.head
        while add_mid_after_temp.data!=val:
            add_mid_after_temp=add_mid_after_temp.next
        n.next=add_mid_after_temp.next
        add_mid_after_temp.next=n
            
n1=node(300)
n2=node(100)
n3=node(500)
n4=node(200)
n5=node(400)
l=ll()
l.add_last(n1)
l.add_first(n2)
l.add_last(n3)
l.add_mid_before(n4,300)
l.add_mid_after(n5,300)
l.display()

----------------------------------------------------
delete elements in linked list:
----------------------------------------------------
     def delete_first(self):
        self.head=self.head.next
    def delete_last(self):
        delete_last_temp=self.head
        while delete_last_temp.next.next !=None:
            delete_last_temp=delete_last_temp.next
        delete_last_temp.next=None
    def delete_mid(self,val):
        delete_mid_temp=self.head
        while delete_mid_temp.next.data !=val:
            delete_mid_temp=delete_mid_temp.next
        delete_mid_temp.next=delete_mid_temp.next.next
        
            
            
n1=node(300)
n2=node(100)
n3=node(500)
n4=node(200)
n5=node(400)
l=ll()
l.add_last(n1)
l.add_first(n2)
l.add_last(n3)
l.add_mid_before(n4,300)
l.add_mid_after(n5,300)
l.delete_first()
l.delete_last()
l.delete_mid(300)
l.display()      
        